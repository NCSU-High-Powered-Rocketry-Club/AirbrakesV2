[project]
name = "AirbrakesV2"
description = "Logic for air brakes as a part of the NASA Student Launch Competition"
requires-python = ">=3.13"
version = "1.1.0"
readme = "README.md"
dependencies = [
    "gpiozero",
    "msgspec",
    "numpy",
    "colorama",
    "psutil",
    "scipy",
    "pandas",
    "faster-fifo",
    "textual",
    "python-mscl>=67.0.0",
    # Need the below to get the servo to work. Make sure you are using the full Raspberry Pi OS 
    # 64 bit image and not the lite. You also need to add `dtparam=i2c_arm=on` in the /boot/firmware/config.txt
    "rpi-gpio>=0.7.1",
    "adafruit-circuitpython-servokit>=1.3.19",
]

[dependency-groups]
dev = [
    "pytest",
    "pytest-cov",
    "ruff",
    "pre-commit",
    "pytest-benchmark>=5.1.0",
]
# Need to run `sudo apt install `libcap-dev`, `libcamera-dev`,
# `libkms++-dev`, `libfmt-dev`, `libdrm-dev` to build and install everything camera related.
#camera = [
    #"picamera2>=0.3.24",
    #"rpi-libcamera>=0.1a7",
    #"rpi-kms>=0.1a1",
#]

[project.scripts]
mock = "airbrakes.main:run_mock_flight"
real = "airbrakes.main:run_real_flight"
sim = "airbrakes.main:run_sim_flight"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# UV:
[tool.uv]
python-preference = "only-managed"

# HATCH:
[tool.hatch.build.targets.wheel]
packages = ["airbrakes"]

[tool.hatch.build.targets.wheel.force-include]
# specify one launch file so that the mock flight can be run as a demo with uvx.
"launch_data/genesis_launch_1.csv" = "/launch_data/genesis_launch_1.csv"

# RUFF:
[tool.ruff]
line-length = 100
target-version = "py313"
show-fixes = true
exclude = ["scripts"]

[tool.ruff.lint]
ignore = ["PLR2004", "PLR0911", "PLR0912", "PLR0913", "PLR0915", "PERF203", "ISC001", "S311"]
select = ["E", "F", "I", "PL", "UP", "RUF", "PTH", "C4", "B", "PIE", "SIM", "RET", "RSE",
          "G", "ISC", "PT", "ASYNC", "TCH", "SLOT", "PERF", "PYI", "FLY", "AIR", "Q", "INP", 
          "W", "YTT", "DTZ", "ARG", "T20", "FURB", "D100", "D101", "D300", "D418",
          "D419", "S", "NPY"]

[tool.ruff.lint.per-file-ignores]
"main.py" = ["T201"]
"airbrakes/mock/display.py" = ["T201"]
"tests/*.py" = ["T20", "S101", "D100", "ARG001", "RUF012"]

[tool.pytest.ini_options]
filterwarnings = [
    "error",  # treat warnings as errors
    "ignore:This process:DeprecationWarning",  # ignore warning about fork()
    "ignore:To reduce servo jitter",  # ignore warning about pigpio
    "ignore:Covariance of the parameters",  # ignore warning about scipt curve_fit
    "ignore:Could not set process priority"  # ignore warning about process priority
]
addopts = "--benchmark-skip"  # skip benchmarks by default:
markers = [
    "imu_benchmark",
]

[tool.coverage.run]
branch = true
# Unfortunately the multiprocessing support is causing some tests to fail (it seems to make things
# slow)
# concurrency = ["multiprocessing", "thread"]
# sigterm = true
# parallel = true
source = ["airbrakes"]
omit = [
    "*/tests/*",
    "*/site-packages/*",
    "airbrakes/mock/*",
    "airbrakes/simulation/*",
    "airbrakes/main.py",
]

[tool.coverage.report]
skip_covered = false
skip_empty = true
exclude_also = [
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == \"__main__\":",
    "if sys.platform == 'win32'",
    "@overload",
    "@abstractmethod",
    "if TYPE_CHECKING:",
    "from multiprocessing import Queue",
    "from queue import Empty",
]
show_missing = true
fail_under = 88
